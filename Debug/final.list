
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000644  0800064c  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000644  08000644  0000164c  2**0
                  CONTENTS
  4 .ARM          00000000  08000644  08000644  0000164c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000644  0800064c  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000648  08000648  00001648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800064c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800064c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017d8  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000590  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  000033e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000051  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd9c  00000000  00000000  000036d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001672  00000000  00000000  0000f46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003ba09  00000000  00000000  00010adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0004c4e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af0  00000000  00000000  0004c5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000035  00000000  00000000  0004d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000200  00000000  00000000  0004d0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800062c 	.word	0x0800062c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800062c 	.word	0x0800062c

080001d4 <main>:
static void LEDs_Init(void);
static void SetPin(GPIO_TypeDef* port, uint16_t pin, uint8_t state);
static uint8_t ReadPin(GPIO_TypeDef* port, uint16_t pin);
static void Delay(volatile uint32_t count);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    Buzzer_Init();
 80001da:	f000 f887 	bl	80002ec <Buzzer_Init>
    Button_Init();
 80001de:	f000 f8a3 	bl	8000328 <Button_Init>
    LEDs_Init();
 80001e2:	f000 f8c9 	bl	8000378 <LEDs_Init>

    // Power-up indication: flash onboard green LED once
    SetPin(LED_ONBOARD_GREEN_PORT, LED_ONBOARD_GREEN_PIN, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2120      	movs	r1, #32
 80001ea:	483c      	ldr	r0, [pc, #240]	@ (80002dc <main+0x108>)
 80001ec:	f000 f8e2 	bl	80003b4 <SetPin>
    Delay(200000);
 80001f0:	483b      	ldr	r0, [pc, #236]	@ (80002e0 <main+0x10c>)
 80001f2:	f000 f90c 	bl	800040e <Delay>
    SetPin(LED_ONBOARD_GREEN_PORT, LED_ONBOARD_GREEN_PIN, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	2120      	movs	r1, #32
 80001fa:	4838      	ldr	r0, [pc, #224]	@ (80002dc <main+0x108>)
 80001fc:	f000 f8da 	bl	80003b4 <SetPin>
    Delay(200000);
 8000200:	4837      	ldr	r0, [pc, #220]	@ (80002e0 <main+0x10c>)
 8000202:	f000 f904 	bl	800040e <Delay>

    bool blue_on = false;
 8000206:	2300      	movs	r3, #0
 8000208:	71fb      	strb	r3, [r7, #7]
    uint32_t b2_counter = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	603b      	str	r3, [r7, #0]

    while (1) {
        // B3 pressed once: flash RGB green LED + beep buzzer
        if (ReadPin(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESS) {
 800020e:	2110      	movs	r1, #16
 8000210:	4832      	ldr	r0, [pc, #200]	@ (80002dc <main+0x108>)
 8000212:	f000 f8e7 	bl	80003e4 <ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d131      	bne.n	8000280 <main+0xac>
            Delay(20000);
 800021c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000220:	f000 f8f5 	bl	800040e <Delay>
            if (ReadPin(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESS) {
 8000224:	2110      	movs	r1, #16
 8000226:	482d      	ldr	r0, [pc, #180]	@ (80002dc <main+0x108>)
 8000228:	f000 f8dc 	bl	80003e4 <ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d126      	bne.n	8000280 <main+0xac>
                SetPin(LED_RGB_GREEN_PORT, LED_RGB_GREEN_PIN, GPIO_PIN_SET); // Bật LED xanh lá đúng
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000238:	4828      	ldr	r0, [pc, #160]	@ (80002dc <main+0x108>)
 800023a:	f000 f8bb 	bl	80003b4 <SetPin>
                SetPin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000244:	4827      	ldr	r0, [pc, #156]	@ (80002e4 <main+0x110>)
 8000246:	f000 f8b5 	bl	80003b4 <SetPin>
                Delay(200000);
 800024a:	4825      	ldr	r0, [pc, #148]	@ (80002e0 <main+0x10c>)
 800024c:	f000 f8df 	bl	800040e <Delay>
                SetPin(LED_RGB_GREEN_PORT, LED_RGB_GREEN_PIN, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000256:	4821      	ldr	r0, [pc, #132]	@ (80002dc <main+0x108>)
 8000258:	f000 f8ac 	bl	80003b4 <SetPin>
                SetPin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000262:	4820      	ldr	r0, [pc, #128]	@ (80002e4 <main+0x110>)
 8000264:	f000 f8a6 	bl	80003b4 <SetPin>
                while (ReadPin(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESS) {
 8000268:	e003      	b.n	8000272 <main+0x9e>
                    Delay(10000);
 800026a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800026e:	f000 f8ce 	bl	800040e <Delay>
                while (ReadPin(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESS) {
 8000272:	2110      	movs	r1, #16
 8000274:	4819      	ldr	r0, [pc, #100]	@ (80002dc <main+0x108>)
 8000276:	f000 f8b5 	bl	80003e4 <ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0f4      	beq.n	800026a <main+0x96>
                }
            }
        }

        // B2 hold > 500ms: bật LED xanh dương cho tới khi nhả nút
        if (ReadPin(BUTTON_B2_PORT, BUTTON_B2_PIN) == BTN_PRESS) {
 8000280:	2108      	movs	r1, #8
 8000282:	4819      	ldr	r0, [pc, #100]	@ (80002e8 <main+0x114>)
 8000284:	f000 f8ae 	bl	80003e4 <ReadPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d114      	bne.n	80002b8 <main+0xe4>
            b2_counter++;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	603b      	str	r3, [r7, #0]
            if (b2_counter > 50 && !blue_on) {
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b32      	cmp	r3, #50	@ 0x32
 8000298:	d91b      	bls.n	80002d2 <main+0xfe>
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f083 0301 	eor.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d015      	beq.n	80002d2 <main+0xfe>
                SetPin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET); // Bật LED xanh dương đúng
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002ac:	480b      	ldr	r0, [pc, #44]	@ (80002dc <main+0x108>)
 80002ae:	f000 f881 	bl	80003b4 <SetPin>
                blue_on = true;
 80002b2:	2301      	movs	r3, #1
 80002b4:	71fb      	strb	r3, [r7, #7]
 80002b6:	e00c      	b.n	80002d2 <main+0xfe>
            }
        } else {
            if (blue_on) {
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d007      	beq.n	80002ce <main+0xfa>
                SetPin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002c4:	4805      	ldr	r0, [pc, #20]	@ (80002dc <main+0x108>)
 80002c6:	f000 f875 	bl	80003b4 <SetPin>
                blue_on = false;
 80002ca:	2300      	movs	r3, #0
 80002cc:	71fb      	strb	r3, [r7, #7]
            }
            b2_counter = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	603b      	str	r3, [r7, #0]
        }
        Delay(10000);
 80002d2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80002d6:	f000 f89a 	bl	800040e <Delay>
        if (ReadPin(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESS) {
 80002da:	e798      	b.n	800020e <main+0x3a>
 80002dc:	40020000 	.word	0x40020000
 80002e0:	00030d40 	.word	0x00030d40
 80002e4:	40020800 	.word	0x40020800
 80002e8:	40020400 	.word	0x40020400

080002ec <Buzzer_Init>:
    }
    return 0;
}

/******************************* Initialization **********************************/
static void Buzzer_Init(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio;
    RCC_AHB1PeriphClockCmd(BUZZER_CLK, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	2004      	movs	r0, #4
 80002f6:	f000 f955 	bl	80005a4 <RCC_AHB1PeriphClockCmd>
    gpio.GPIO_Pin = BUZZER_PIN;
 80002fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80002fe:	603b      	str	r3, [r7, #0]
    gpio.GPIO_Mode = GPIO_Mode_OUT;
 8000300:	2301      	movs	r3, #1
 8000302:	713b      	strb	r3, [r7, #4]
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8000304:	2302      	movs	r3, #2
 8000306:	717b      	strb	r3, [r7, #5]
    gpio.GPIO_OType = GPIO_OType_PP;
 8000308:	2300      	movs	r3, #0
 800030a:	71bb      	strb	r3, [r7, #6]
    gpio.GPIO_PuPd = GPIO_PuPd_DOWN;
 800030c:	2302      	movs	r3, #2
 800030e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(BUZZER_PORT, &gpio);
 8000310:	463b      	mov	r3, r7
 8000312:	4619      	mov	r1, r3
 8000314:	4803      	ldr	r0, [pc, #12]	@ (8000324 <Buzzer_Init+0x38>)
 8000316:	f000 f8b6 	bl	8000486 <GPIO_Init>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020800 	.word	0x40020800

08000328 <Button_Init>:

static void Button_Init(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio;
    // B2
    RCC_AHB1PeriphClockCmd(B2_CLK, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	2002      	movs	r0, #2
 8000332:	f000 f937 	bl	80005a4 <RCC_AHB1PeriphClockCmd>
    gpio.GPIO_Pin = BUTTON_B2_PIN;
 8000336:	2308      	movs	r3, #8
 8000338:	603b      	str	r3, [r7, #0]
    gpio.GPIO_Mode = GPIO_Mode_IN;
 800033a:	2300      	movs	r3, #0
 800033c:	713b      	strb	r3, [r7, #4]
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800033e:	2302      	movs	r3, #2
 8000340:	717b      	strb	r3, [r7, #5]
    gpio.GPIO_PuPd = GPIO_PuPd_UP;
 8000342:	2301      	movs	r3, #1
 8000344:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(BUTTON_B2_PORT, &gpio);
 8000346:	463b      	mov	r3, r7
 8000348:	4619      	mov	r1, r3
 800034a:	4809      	ldr	r0, [pc, #36]	@ (8000370 <Button_Init+0x48>)
 800034c:	f000 f89b 	bl	8000486 <GPIO_Init>

    // B3
    RCC_AHB1PeriphClockCmd(B3_CLK, ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	2001      	movs	r0, #1
 8000354:	f000 f926 	bl	80005a4 <RCC_AHB1PeriphClockCmd>
    gpio.GPIO_Pin = BUTTON_B3_PIN;
 8000358:	2310      	movs	r3, #16
 800035a:	603b      	str	r3, [r7, #0]
    GPIO_Init(BUTTON_B3_PORT, &gpio);
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <Button_Init+0x4c>)
 8000362:	f000 f890 	bl	8000486 <GPIO_Init>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40020400 	.word	0x40020400
 8000374:	40020000 	.word	0x40020000

08000378 <LEDs_Init>:

static void LEDs_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio;
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2001      	movs	r0, #1
 8000382:	f000 f90f 	bl	80005a4 <RCC_AHB1PeriphClockCmd>
    gpio.GPIO_Pin = LED_ONBOARD_GREEN_PIN | LED_RGB_GREEN_PIN | LED_BLUE_PIN;
 8000386:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 800038a:	603b      	str	r3, [r7, #0]
    gpio.GPIO_Mode = GPIO_Mode_OUT;
 800038c:	2301      	movs	r3, #1
 800038e:	713b      	strb	r3, [r7, #4]
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8000390:	2302      	movs	r3, #2
 8000392:	717b      	strb	r3, [r7, #5]
    gpio.GPIO_OType = GPIO_OType_PP;
 8000394:	2300      	movs	r3, #0
 8000396:	71bb      	strb	r3, [r7, #6]
    gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(LED_ONBOARD_GREEN_PORT, &gpio);
 800039c:	463b      	mov	r3, r7
 800039e:	4619      	mov	r1, r3
 80003a0:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <LEDs_Init+0x38>)
 80003a2:	f000 f870 	bl	8000486 <GPIO_Init>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40020000 	.word	0x40020000

080003b4 <SetPin>:

/******************************* Helper Functions *********************************/
static void SetPin(GPIO_TypeDef* port, uint16_t pin, uint8_t state) {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	807b      	strh	r3, [r7, #2]
 80003c0:	4613      	mov	r3, r2
 80003c2:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) port->BSRRL = pin;
 80003c4:	787b      	ldrb	r3, [r7, #1]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d103      	bne.n	80003d2 <SetPin+0x1e>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	887a      	ldrh	r2, [r7, #2]
 80003ce:	831a      	strh	r2, [r3, #24]
    else                       port->BSRRH = pin;
}
 80003d0:	e002      	b.n	80003d8 <SetPin+0x24>
    else                       port->BSRRH = pin;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	887a      	ldrh	r2, [r7, #2]
 80003d6:	835a      	strh	r2, [r3, #26]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <ReadPin>:

static uint8_t ReadPin(GPIO_TypeDef* port, uint16_t pin) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	807b      	strh	r3, [r7, #2]
    return ((port->IDR & pin) == 0) ? BTN_PRESS : 1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	691a      	ldr	r2, [r3, #16]
 80003f4:	887b      	ldrh	r3, [r7, #2]
 80003f6:	4013      	ands	r3, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	bf14      	ite	ne
 80003fc:	2301      	movne	r3, #1
 80003fe:	2300      	moveq	r3, #0
 8000400:	b2db      	uxtb	r3, r3
}
 8000402:	4618      	mov	r0, r3
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <Delay>:

static void Delay(volatile uint32_t count) {
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
    while (count--) __NOP();
 8000416:	e001      	b.n	800041c <Delay+0xe>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000418:	bf00      	nop
}
 800041a:	bf00      	nop
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1f8      	bne.n	8000418 <Delay+0xa>
}
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	@ (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 f8bf 	bl	80005e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff feb5 	bl	80001d4 <main>

0800046a <LoopForever>:

LoopForever:
  b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000478:	0800064c 	.word	0x0800064c
  ldr r2, =_sbss
 800047c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000480:	2000001c 	.word	0x2000001c

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>

08000486 <GPIO_Init>:
 8000486:	b480      	push	{r7}
 8000488:	b087      	sub	sp, #28
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	6039      	str	r1, [r7, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e076      	b.n	8000590 <GPIO_Init+0x10a>
 80004a2:	2201      	movs	r2, #1
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	693a      	ldr	r2, [r7, #16]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d165      	bne.n	800058a <GPIO_Init+0x104>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	4619      	mov	r1, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d003      	beq.n	80004fc <GPIO_Init+0x76>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d12e      	bne.n	800055a <GPIO_Init+0xd4>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	689a      	ldr	r2, [r3, #8]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	2103      	movs	r1, #3
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	401a      	ands	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689a      	ldr	r2, [r3, #8]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	4619      	mov	r1, r3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	431a      	orrs	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	b29b      	uxth	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	2301      	movs	r3, #1
 8000536:	408b      	lsls	r3, r1
 8000538:	43db      	mvns	r3, r3
 800053a:	401a      	ands	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	7992      	ldrb	r2, [r2, #6]
 8000548:	4611      	mov	r1, r2
 800054a:	697a      	ldr	r2, [r7, #20]
 800054c:	b292      	uxth	r2, r2
 800054e:	fa01 f202 	lsl.w	r2, r1, r2
 8000552:	b292      	uxth	r2, r2
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	b29b      	uxth	r3, r3
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	2103      	movs	r1, #3
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	401a      	ands	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	79db      	ldrb	r3, [r3, #7]
 800057a:	4619      	mov	r1, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	431a      	orrs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	3301      	adds	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2b0f      	cmp	r3, #15
 8000594:	d985      	bls.n	80004a2 <GPIO_Init+0x1c>
 8000596:	bf00      	nop
 8000598:	371c      	adds	r7, #28
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <RCC_AHB1PeriphClockCmd>:
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <RCC_AHB1PeriphClockCmd+0x20>
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ba:	4909      	ldr	r1, [pc, #36]	@ (80005e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	630b      	str	r3, [r1, #48]	@ 0x30
 80005c2:	e006      	b.n	80005d2 <RCC_AHB1PeriphClockCmd+0x2e>
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	630b      	str	r3, [r1, #48]	@ 0x30
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <__libc_init_array>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4d0d      	ldr	r5, [pc, #52]	@ (800061c <__libc_init_array+0x38>)
 80005e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000620 <__libc_init_array+0x3c>)
 80005ea:	1b64      	subs	r4, r4, r5
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	2600      	movs	r6, #0
 80005f0:	42a6      	cmp	r6, r4
 80005f2:	d109      	bne.n	8000608 <__libc_init_array+0x24>
 80005f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000624 <__libc_init_array+0x40>)
 80005f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000628 <__libc_init_array+0x44>)
 80005f8:	f000 f818 	bl	800062c <_init>
 80005fc:	1b64      	subs	r4, r4, r5
 80005fe:	10a4      	asrs	r4, r4, #2
 8000600:	2600      	movs	r6, #0
 8000602:	42a6      	cmp	r6, r4
 8000604:	d105      	bne.n	8000612 <__libc_init_array+0x2e>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f855 3b04 	ldr.w	r3, [r5], #4
 800060c:	4798      	blx	r3
 800060e:	3601      	adds	r6, #1
 8000610:	e7ee      	b.n	80005f0 <__libc_init_array+0xc>
 8000612:	f855 3b04 	ldr.w	r3, [r5], #4
 8000616:	4798      	blx	r3
 8000618:	3601      	adds	r6, #1
 800061a:	e7f2      	b.n	8000602 <__libc_init_array+0x1e>
 800061c:	08000644 	.word	0x08000644
 8000620:	08000644 	.word	0x08000644
 8000624:	08000644 	.word	0x08000644
 8000628:	08000648 	.word	0x08000648

0800062c <_init>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr

08000638 <_fini>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr
